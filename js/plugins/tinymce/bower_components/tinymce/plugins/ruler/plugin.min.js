tinymce.PluginManager.add("ruler", function (e) { var t, n; function r() { try { t = $(e.getDoc().getElementsByTagName("HTML")[0]), console.log($("tinystyle").html()), t.find("head").append($("<style>" + $("tinystyle").html() + "</style>")) } catch (e) { return setTimeout(r, 50) } var a = 96 / 2.54 * 24, i = t.height() + 5 * a, l = []; if (t.find(".mce-pagebreak").each(function () { l[l.length] = $(this).offset().top }), l.sort(), n != l) { n = l, console.log("Redraw ruler"); var o = ""; o += '<svg width="100%" height="' + i + '" xmlns="http://www.w3.org/2000/svg">', o += "<style>", o += ".pageNumber{font-weight:bold;font-size:19px;font-family:verdana;text-shadow:1px 1px 1px rgba(0,0,0,.6);}", o += "</style>"; var s, g = Math.ceil(i / a), h = 4; for (s = 0; s < g; s++) { for (var f = a, d = 0, c = 0; c < l.length; c++)l[c] < h + f && (f = l[c] - h, d = 1, l.splice(c, 1)); o += '<line x1="0" y1="' + h + '" x2="100%" y2="' + h + '" stroke-width="1" stroke="red"/>', o += '<pattern id="ruler' + s + '" x="0" y="' + h + '" width="37.79527559055118" height="37.79527559055118" patternUnits="userSpaceOnUse">', o += '<line x1="0" y1="0" x2="100%" y2="0" stroke-width="1" stroke="black"/>', o += "</pattern>", o += '<rect x="0" y="' + h + '" width="100%" height="' + f + '" fill="url(#ruler' + s + ')" />', o += '<text x="10" y="' + (h + 19 + 5) + '" class="pageNumber" fill="#ffffff">' + (s + 1) + ".</text>", h += f, d && (h += 14) } o += "</svg>", t.css("background-image", 'url("data:image/svg+xml;utf8,' + encodeURIComponent(o) + '")') } } e.on("NodeChange", r), e.on("init", r) });